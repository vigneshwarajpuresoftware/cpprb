name: CI

on: [push]

jobs:
  readme:
    container: iquiw/alpine-emacs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: emacs --batch README.org --eval '(org-md-export-to-markdown)'
      - uses: actions/upload-artifact@v1
        with:
          name: README
          path: README.md
  build:
    needs: readme
    strategy:
      matrix:
        runs-on: [ubuntu-latest, macos-latest, windows-latest]
        python: ['3.6', '3.7', '3.8']
      fail-fast: false
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip${{ matrix.python }}
          restore-keys: ${{ runner.os }}-pip${{ matrix.python }}
      - run: pip install wheel
      - run: pip install cython setuptools twine gym 'numpy<1.20.0'
      - name: Install cpprb for macOS
        run: CC=gcc-9 CXX=g++-9 pip install '.[gym]'
        if: startsWith(runner.os, 'macOS')
      - name: Install cpprb for others
        run: pip install '.[gym]'
        if: startsWith(runner.os, 'macOS') != true
      - run: python -m unittest discover . '*.py'
        working-directory: './test'
      - uses: actions/download-artifact@v1
        with:
          name: README
      - run: mv README/README.md README.md
      - run: python setup.py bdist_wheel
        if: startsWith(runner.os, 'Windows')
      - uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist
        if: startsWith(runner.os, 'Windows')
      - name: Upload to PyPI
        run: python -m twine upload -u __token__ -p ${{ secrets.pypi_password }} --skip-existing dist/cpprb-*
        if: github.event_name == 'push' && startsWith(github.event.ref,'refs/tags/v') && startsWith(runner.os, 'Windows')
        continue-on-error: true

  build_aarch64:
      runs-on: ${{ matrix.os }}
      needs: build
      strategy:
        fail-fast: false
        matrix:
          python-version: ['cp36-cp36m', 'cp37-cp37m', 'cp38-cp38', 'cp39-cp39']
          os: [ubuntu-latest]
      env:
        py: /opt/python/${{ matrix.python-version }}/bin/python
        img: quay.io/pypa/manylinux2014_aarch64

      steps:
        - uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python }}

        - uses: actions/checkout@v2
        - name: Set up QEMU
          id: qemu
          uses: docker/setup-qemu-action@v1

        - name: Building wheel
          run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '${{ env.py }} -m venv .env && \
            source .env/bin/activate && \
            echo "::set-output name=dir::$(pip cache dir)" && \
            deactivate '
